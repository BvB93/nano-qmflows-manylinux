name: Build MacOS dependencies

on:
  workflow_dispatch:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  HIGHFIVE_VERSION: "2.4.1"
  BOOST_VERSION: "1.79.0"
  EIGEN_VERSION: "3.4.0"
  HDF5_VERSION: "1.12.2"
  LIBINT_VERSION: "2.7.1"

jobs:
  build:
    name: Build MacOS ${{ matrix.arch[0] }} dependencies
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          # [<architecture>, <min darwin version>]
          - ["x86_64", "18"]
    env:
      DARWIN_VERSION: "${{ matrix.arch[1] }}"

      CC: "/usr/bin/clang"
      CXX: "/usr/bin/clang++"
      CFLAGS: "-arch ${{ matrix.arch[0] }}"
      CPPFLAGS: "-arch ${{ matrix.arch[0] }}"
      CXXFLAGS: "-std=c++11 -arch ${{ matrix.arch[0] }}"

      PREFIX: ${{github.workspace}}/macos_${{ matrix.arch[0] }}
      HOST: "${{ matrix.arch[0] }}-apple-darwin${{ matrix.arch[1] }}"

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3

    - name: Install dependencies
      run: pip install -e .

    - name: Python info
      run: |
        which python
        python --version

    - name: Installed packages
      run: pip list

    - name: Create output directories
      run: |
        mkdir -p $PREFIX/lib
        mkdir -p $PREFIX/bin
        mkdir -p $PREFIX/include

    - name: Install Automake
      run: |
        brew update
        brew install automake

    - name: Install HighFive
      run: python tools/install_highfive.py $HIGHFIVE_VERSION --prefix=$PREFIX

    - name: Install Boost
      run: python tools/install_boost.py $BOOST_VERSION --prefix=$PREFIX

    - name: Install Eigen
      run: python tools/install_eigen.py $EIGEN_VERSION --prefix=$PREFIX

    - name: Install HDF5
      run: |
        python tools/install_hdf5.py $HDF5_VERSION --prefix=$PREFIX --libdir=/usr/local/lib --host=$HOST
        cp /usr/local/lib/libhdf5* $PREFIX/lib/

    - name: Install Libint
      run: |
        cp -r $PREFIX/include/* /usr/local/include/
        python tools/install_libint.py $LIBINT_VERSION --prefix=$PREFIX --libdir=/usr/local/lib --host=$HOST --target=$HOST
        cp /usr/local/lib/libint2* $PREFIX/lib/

    - name: Create archive
      run: tar -czvf macos_${{ matrix.arch[0] }}.tar.gz $PREFIX

    - uses: actions/upload-artifact@v3
      with:
        name: deps
        path: macos_*.tar.gz

  upload_wheels:
    name: Attach artifacts to release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: deps
          path: output

      - name: Attach artifacts to GitHub release
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'output/*'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
